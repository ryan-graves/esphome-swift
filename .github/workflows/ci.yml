name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  SWIFT_VERSION: '5.9'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
        
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: SwiftyLab/setup-swift@latest
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
    
    - name: Swift Version
      run: swift --version
    
    - name: Build
      run: swift build -v
    
    - name: Run Tests
      run: swift test -v
    
    - name: Build Release
      run: swift build -c release -v

  lint:
    name: SwiftLint (macOS)
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Install SwiftLint
      run: brew install swiftlint
    
    - name: SwiftLint
      run: swiftlint

  format-check:
    name: Format Check (Cross-Platform)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: SwiftyLab/setup-swift@latest
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
    
    - name: Install SwiftFormat
      run: |
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          brew install swiftformat
        else
          # Install SwiftFormat on Linux
          curl -L https://github.com/nicklockwood/SwiftFormat/releases/latest/download/swiftformat_linux.zip -o swiftformat.zip
          unzip swiftformat.zip
          chmod +x swiftformat_linux
          sudo mv swiftformat_linux /usr/local/bin/swiftformat
        fi
    
    - name: Check Formatting
      run: swiftformat --lint .

  code-coverage:
    name: Code Coverage
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: SwiftyLab/setup-swift@latest
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
    
    - name: Run Tests with Coverage
      run: |
        swift test --enable-code-coverage || true
        # Generate coverage report if possible
        if [ -d ".build/debug/codecov" ]; then
          xcrun llvm-cov export -format="lcov" \
            .build/debug/*PackageTests.xctest/Contents/MacOS/*PackageTests \
            -instr-profile .build/debug/codecov/default.profdata > coverage.lcov || echo "Coverage generation failed"
        fi
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.lcov
        fail_ci_if_error: false

  validate-examples:
    name: Validate Example Configurations
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: SwiftyLab/setup-swift@latest
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
    
    - name: Build CLI
      run: swift build --product esphome-swift
    
    - name: Validate Examples
      run: |
        for example in Examples/*.yaml; do
          echo "Validating $example"
          .build/debug/esphome-swift validate-command "$example"
        done