services:
  swift-embedded:
    build:
      context: .
      dockerfile: Dockerfile.simple
    image: esphome-swift:embedded
    container_name: esphome-swift-dev
  
  # ESP-IDF + Swift Embedded environment for Phase 2
  esp-idf:
    build:
      context: .
      dockerfile: Dockerfile.esp-idf
    image: esphome-swift:esp-idf
    container_name: esphome-swift-esp-idf
    
    # Mount the project directory into the container
    volumes:
      - .:/workspace/esphome-swift
      - swift-build-cache:/workspace/esphome-swift/.build
      - esp-idf-tools:/opt/esp-tools
    
    # Keep STDIN open and allocate a pseudo-TTY
    stdin_open: true
    tty: true
    
    # Environment variables
    environment:
      - TERM=xterm-256color
      - SWIFT_EMBEDDED=1
      - IDF_PATH=/opt/esp-idf
      - IDF_TOOLS_PATH=/opt/esp-tools
    
    # Working directory
    working_dir: /workspace/esphome-swift
    
    # For USB device access (ESP32 flashing)
    # Uncomment these lines when you need to flash devices
    # privileged: true
    # devices:
    #   - /dev/ttyUSB0:/dev/ttyUSB0
    #   - /dev/tty.usbserial:/dev/tty.usbserial
    
    # Network mode for development
    network_mode: bridge

  # Quick command shortcuts
  build:
    extends: swift-embedded
    command: swift build
    stdin_open: false
    tty: false
  
  test:
    extends: swift-embedded
    command: swift test
    stdin_open: false
    tty: false

  shell:
    extends: swift-embedded
    command: /bin/bash

  # ESP-IDF environment shortcuts
  esp-build:
    extends: esp-idf
    command: /bin/bash -c "source /opt/setup-esp-idf.sh && swift build"
    stdin_open: false
    tty: false
  
  esp-shell:
    extends: esp-idf
    command: /bin/bash -c "source /opt/setup-esp-idf.sh && /bin/bash"

# Named volumes for persistence
volumes:
  swift-build-cache:
  esp-idf-tools: